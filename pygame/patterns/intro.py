'''
https://www.pygame.org/docs/tut/PygameIntro.html
http://ezide.com/games/writing-games.html
'''

def Debug( msg ):
	print msg

DIRECTION_UP = 0
DIRECTION_DOWN = 1
DIRECTION_LEFT = 2
DIRECTION_RIGHT = 3

class Event:
    """this is a superclass for any events that might be generated by an
    object and sent to the EventManager"""
    def __init__(self):
        self.name = "Generic Event"

class TickEvent(Event):
	def __init__(self):
		self.name = "CPU Tick Event"

class QuitEvent(Event):
	def __init__(self):
		self.name = "Program Quit Event"

class MapBuiltEvent(Event):
	def __init__(self, gameMap):
		self.name = "Map Finished Building Event"
		self.map = gameMap

class KSpaceEvent(Event):
	def __init__(self):
		self.name = "Key Space Event"
		
class GameStartedEvent(Event):
	def __init__(self, game):
		self.name = "Game Started Event"
		self.game = game

class CharactorMoveRequest(Event):
	def __init__(self, direction):
		self.name = "Charactor Move Request"
		self.direction = direction

class CharactorPlaceEvent(Event):
	"""this event occurs when a Charactor is *placed* in a sector,
	ie it doesn't move there from an adjacent sector."""
	def __init__(self, charactor):
		self.name = "Charactor Placement Event"
		self.charactor = charactor

class CharactorMoveEvent(Event):
	def __init__(self, charactor):
		self.name = "Charactor Move Event"
		self.charactor = charactor

#------------------------------------------------------------------------------
class EventManager:
	"""this object is responsible for coordinating most communication
	between the Model, View, and Controller."""
	def __init__(self):
		from weakref import WeakKeyDictionary
		self.listeners = WeakKeyDictionary()
		self.eventQueue= []

	#----------------------------------------------------------------------
	def RegisterListener( self, listener ):
		self.listeners[ listener ] = 1

	#----------------------------------------------------------------------
	def UnregisterListener( self, listener ):
		if listener in self.listeners:
			del self.listeners[ listener ]
		
	#----------------------------------------------------------------------
	def Post( self, event ):
		if not isinstance(event, TickEvent):
			Debug( "     Message: " + event.name )
		for listener in self.listeners:
			#NOTE: If the weakref has died, it will be 
			#automatically removed, so we don't have 
			#to worry about it.
			listener.Notify( event )

#------------------------------------------------------------------------------
class KeyboardController:
	"""KeyboardController takes Pygame events generated by the
	keyboard and uses them to control the model, by sending Requests
	or to control the Pygame display directly, as with the QuitEvent
	"""
	def __init__(self, evManager):
		self.evManager = evManager
		self.evManager.RegisterListener( self )

	#----------------------------------------------------------------------
	def Notify(self, event):
		if isinstance( event, TickEvent ):
			#Handle Input Events
			for event in pygame.event.get():
				ev = None
				if event.type == QUIT:
					ev = QuitEvent()
				elif event.type == KEYDOWN \
				     and event.key == K_ESCAPE:
					ev = QuitEvent()
				elif event.type == KEYDOWN \
				     and event.key == K_UP:
					direction = DIRECTION_UP
					ev = CharactorMoveRequest(direction)
				elif event.type == KEYDOWN \
				     and event.key == K_DOWN:
					direction = DIRECTION_DOWN
					ev = CharactorMoveRequest(direction)
				elif event.type == KEYDOWN \
				     and event.key == K_LEFT:
					direction = DIRECTION_LEFT
					ev = CharactorMoveRequest(direction)
				elif event.type == KEYDOWN \
				     and event.key == K_RIGHT:
					direction = DIRECTION_RIGHT
					ev = CharactorMoveRequest(direction)
				elif event.type == KEYDOWN \
				     and event.key == K_SPACE:
					ev = KSpaceEvent()
					
				if ev:
					self.evManager.Post( ev )


#------------------------------------------------------------------------------
class CPUSpinnerController:
	"""..."""
	def __init__(self, evManager):
		self.clock = pygame.time.Clock()
		self.evManager = evManager
		self.evManager.RegisterListener( self )

		self.keepGoing = 1

	#----------------------------------------------------------------------
	def Run(self):
		while self.keepGoing:
			event = TickEvent()
			self.evManager.Post( event )
			self.clock.tick(60)

	#----------------------------------------------------------------------
	def Notify(self, event):
		if isinstance( event, QuitEvent ):
			#this will stop the while loop from running
			self.keepGoing = False


import pygame
from pygame.locals import *

#------------------------------------------------------------------------------
class CharactorSprite(pygame.sprite.Sprite):
	def __init__(self, group=None, size=None):
		pygame.sprite.Sprite.__init__(self, group)

		charactorSurf = pygame.image.load("intro_ball2.gif")
		self.image = charactorSurf
		self.rect  = charactorSurf.get_rect()

		self.speed = [2, 2]
		self.size = size
	
	#----------------------------------------------------------------------
	def update(self):
		self.rect = self.rect.move(self.speed)
		if self.rect.left < 0 or self.rect.right > self.size[0]:
			self.speed[0] = -self.speed[0]
		if self.rect.top < 0 or self.rect.bottom > self.size[1]:
			self.speed[1] = -self.speed[1]

#------------------------------------------------------------------------------
class PygameView:
	
	def __init__(self, evManager):
		self.isUpdating = True
		
		self.evManager = evManager
		self.evManager.RegisterListener( self )

		pygame.init()
		self.window = pygame.display.set_mode( (320,240) )
		pygame.display.set_caption( 'Intro' )
		self.background = pygame.Surface( self.window.get_size() )
		self.background.fill( (0,0,0) )
		font = pygame.font.Font(None, 30)
		text = "Press SPACE BAR to start"
		textImg = font.render( text, 1, (255,0,0))
		self.background.blit( textImg, (0,0) )
		self.window.blit( self.background, (0,0) )
		pygame.display.flip()

		
		
		self.backSprites = pygame.sprite.RenderUpdates()
		self.frontSprites = pygame.sprite.RenderUpdates()


	#----------------------------------------------------------------------
	def ShowMap(self, gameMap):
		# clear the screen first
		self.background.fill( (0,0,0) )
		self.window.blit( self.background, (0,0) )
		pygame.display.flip()

	#----------------------------------------------------------------------
	def ShowCharactor(self, charactor):
		center = charactor.center
		charactorSprite = CharactorSprite( self.frontSprites, self.window.get_size())
		charactorSprite.rect.center = center

		
	#----------------------------------------------------------------------
	def GetCharactorSprite(self, charactor):
		#there will be only one
		for s in self.frontSprites:
			return s
		return None

	#----------------------------------------------------------------------
	def Notify(self, event):
		if isinstance( event, TickEvent ):
			if self.isUpdating:
				#Draw Everything
				self.backSprites.clear( self.window, self.background )
				self.frontSprites.clear( self.window, self.background )

				self.backSprites.update()
				self.frontSprites.update()

				dirtyRects1 = self.backSprites.draw( self.window )
				dirtyRects2 = self.frontSprites.draw( self.window )
				
				dirtyRects = dirtyRects1 + dirtyRects2
				pygame.display.update( dirtyRects )
			

		elif isinstance( event, MapBuiltEvent ):
			gameMap = event.map
			self.ShowMap( gameMap )
			
		elif isinstance( event, CharactorPlaceEvent ):
			self.ShowCharactor( event.charactor )

		elif isinstance( event, CharactorMoveEvent ):
			self.MoveCharactor( event.charactor )
			
		elif isinstance( event, KSpaceEvent ):
			self.isUpdating = not self.isUpdating

#------------------------------------------------------------------------------
class GameState:
	def __init__(self, game):
		self.game = game
	def prepare(self):
		pass
	def start(self):
		pass
	def pause(self):
		pass
	def play(self):
		pass

class PreparingGameState(GameState):
	def start(self):
		self.game.state = StartGameState(self.game)
		
		self.game.map.Build()
		
		ev = GameStartedEvent( self )
		self.game.evManager.Post( ev )

class StartGameState(GameState):
	def pause(self):
		self.game.state = PauseGameState(self.game)
		
class PauseGameState(GameState):		
	def play(self):
		self.game.state = PlayingGameState(self.game)
		
class PlayingGameState(GameState):
	def pause(self):
		self.game.state = PauseGameState(self.game)
		
class Game:
	"""..."""

	#----------------------------------------------------------------------
	def __init__(self, evManager):
		self.evManager = evManager
		self.evManager.RegisterListener( self )
		
		self.players = [ Player(evManager) ]
		self.map = Map( evManager )
		
		self.state = PreparingGameState(self)
		self.state.start()

	#----------------------------------------------------------------------
	def Notify(self, event):
		if isinstance( event, KSpaceEvent ):
			if isinstance(self.state, StartGameState) or isinstance(self.state, PlayingGameState):
				self.state.pause()
			elif isinstance(self.state,PauseGameState):
				self.state.play()

#------------------------------------------------------------------------------
class Player(object):
	"""..."""
	def __init__(self, evManager):
		self.evManager = evManager
		self.game = None
		self.name = ""
		self.evManager.RegisterListener( self )

		self.charactors = [ Charactor(evManager) ]

	#----------------------------------------------------------------------
	def __str__(self):
		return '<Player %s %s>' % (self.name, id(self))


	#----------------------------------------------------------------------
	def Notify(self, event):
		pass

#------------------------------------------------------------------------------
class Charactor:
	"""..."""

	STATE_INACTIVE = 0
	STATE_ACTIVE = 1

	def __init__(self, evManager):
		self.evManager = evManager
		self.evManager.RegisterListener( self )

		self.sector = None
		self.state = Charactor.STATE_INACTIVE

	#----------------------------------------------------------------------
	def __str__(self):
		return '<Charactor %s>' % id(self)

	#----------------------------------------------------------------------
	def Move(self, direction):
		if self.state == Charactor.STATE_INACTIVE:
			return
			
	#----------------------------------------------------------------------
	def Place(self, center):
		self.center = center
		self.state = Charactor.STATE_ACTIVE

		ev = CharactorPlaceEvent( self )
		self.evManager.Post( ev )

	#----------------------------------------------------------------------
	def Notify(self, event):
		if isinstance( event, GameStartedEvent ):
			self.Place((40, 40))
			
		elif isinstance( event, CharactorMoveRequest ):
			self.Move( event.direction )

#------------------------------------------------------------------------------
class Map:
	"""..."""

	STATE_PREPARING = 0
	STATE_BUILT = 1


	#----------------------------------------------------------------------
	def __init__(self, evManager):
		self.evManager = evManager
		#self.evManager.RegisterListener( self )

		self.state = Map.STATE_PREPARING

	#----------------------------------------------------------------------
	def Build(self):
		self.state = Map.STATE_BUILT

		ev = MapBuiltEvent( self )
		self.evManager.Post( ev )


#------------------------------------------------------------------------------
def main():
	"""..."""
	evManager = EventManager()

	keybd = KeyboardController( evManager )
	spinner = CPUSpinnerController( evManager )
	pygameView = PygameView( evManager )
	game = Game( evManager )
	
	spinner.Run()

if __name__ == "__main__":
	main()
